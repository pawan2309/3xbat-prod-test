services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: 3xbat-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - 3xbat-network

  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: 3xbat-postgres
    environment:
      POSTGRES_DB: betting_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 8079
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - 3xbat-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 3xbat-backend
    environment:
      NODE_ENV: production
      PORT: 4000
      HOST: 0.0.0.0
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DATABASE_URL: postgresql://postgres:8079@postgres:5432/betting_db
      JWT_SECRET: L9vY7z!pQkR#eA1dT3u*Xj5@FbNmC2Ws
      FRONTEND_URL: http://13.60.145.70:3000
      # Enable background systems for data population
      DISABLE_QUEUES: "0"
      DISABLE_SOCKETS: "0"
      DISABLE_WORKERS: "0"
    ports:
      - "4000:4000"
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started
    restart: unless-stopped
    networks:
      - 3xbat-network
    command: npm start
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  # Client Panels Frontend
  client-panels:
    build:
      context: ./frontend/apps/client-panels
      dockerfile: Dockerfile
    container_name: 3xbat-client-panels
    environment:
      NEXT_PUBLIC_API_URL: http://13.60.145.70:4000
      NEXT_PUBLIC_WS_URL: ws://13.60.145.70:4000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - 3xbat-network
    command: npm start

  # Control Panel Frontend
  control-panel:
    build:
      context: ./frontend/apps/control-panel
      dockerfile: Dockerfile
    container_name: 3xbat-control-panel
    environment:
      NEXT_PUBLIC_API_URL: http://13.60.145.70:4000
      NEXT_PUBLIC_WS_URL: ws://13.60.145.70:4000
    ports:
      - "3001:3001"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - 3xbat-network
    command: npm start

  # User Panel Frontend
  user-panel:
    build:
      context: ./frontend/apps/user-panel
      dockerfile: Dockerfile
    container_name: 3xbat-user-panel
    environment:
      NEXT_PUBLIC_API_URL: http://13.60.145.70:4000
      NEXT_PUBLIC_WS_URL: ws://13.60.145.70:4000
    ports:
      - "3002:3002"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - 3xbat-network
    command: npm start

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: 3xbat-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/nginx-production.conf:/etc/nginx/nginx-production.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    depends_on:
      - client-panels
      - control-panel
      - backend
    restart: unless-stopped
    networks:
      - 3xbat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nginx_status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  certbot_www:
    driver: local
  certbot_conf:
    driver: local

networks:
  3xbat-network:
    driver: bridge
    name: 3xbat-network 