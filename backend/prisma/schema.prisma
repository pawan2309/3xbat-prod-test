generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  username            String               @unique
  password            String
  name                String?
  contactno           String?
  reference           String?
  limit               Float                @default(0)
  exposure            Float                @default(0)
  casinoStatus        Boolean?
  role                UserRole             @default(USER)
  status              UserStatus           @default(ACTIVE)
  parentId            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  bets                Bet[]
  ledger              Ledger[]
  loginSessions       LoginSession[]
  transactions        Transaction[]
  userCommissionShare UserCommissionShare?
  parent              User?                @relation("UserHierarchy", fields: [parentId], references: [id])
  children            User[]               @relation("UserHierarchy")

  @@map("users")
}

model CasinoGame {
  id            Int      @id @default(autoincrement())
  name          String
  shortName     String
  eventId       String
  videoUrl1     String
  minStake      Int
  maxStake      Int
  betStatus     Boolean  @default(true)
  casinoStatus  Boolean  @default(true)
  errorMessage  String   @default("Game is under maintenance")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("casino_games")
}


model LoginSession {
  id              String    @id @default(cuid())
  userId          String
  loginAt         DateTime  @default(now())
  logoutAt        DateTime?
  ipAddress       String?
  userAgent       String?
  deviceType      String?
  location        String?
  sessionDuration Int?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginAt])
  @@index([isActive])
  @@map("login_sessions")
}

model UserCommissionShare {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  share                   Float    @default(0)
  cshare                  Float    @default(0)
  casinocommission        Float    @default(0)
  matchcommission         Float    @default(0)
  sessioncommission       Float    @default(0)
  session_commission_type String   @default("No Comm")
  commissionType          String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  available_share_percent Float    @default(0)
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_commission_shares")
}

model Match {
  id              String         @id @default(cuid())
  externalMatchId String         @unique
  matchName       String
  externalId      String?
  name            String
  sport           String         @default("cricket")
  bevent          String
  bmarket         String
  tournament      String
  startTime       DateTime?
  status          MatchStatus    @default(UPCOMING)
  isLive          Boolean        @default(false)
  isActive        Boolean        @default(true)
  winner          String?
  settledAt       DateTime?
  isDeleted       Boolean        @default(false)
  result          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastUpdated     DateTime       @updatedAt
  bets            Bet[]
  ledger          Ledger[]

  @@index([bmarket])
  @@index([bevent])
  @@index([status])
  @@index([startTime])
  @@index([isLive])
  @@index([isActive])
  @@map("matches")
}




model Bet {
  id                String       @id @default(cuid())
  userId            String
  matchId           String?
  marketId          String?
  selectionId       String?
  selection         String?
  marketName        String?      // Added for better categorization
  stake             Float
  odds              Float
  betType           String?      // Keep for backward compatibility
  betCategory       BettingScope @default(MATCH) // Renamed from scope for clarity
  potentialWin      Float?
  status            BetStatus    @default(PENDING)
  profitLoss        Float?
  settledAt         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  cancelReason      String?
  cancelledAt       DateTime?
  payout            Float?
  
  // Additional fields for table display
  teamName          String?      // For MATCH BETS - TEAM column
  betMode           String?      // For MODE column (back/lay)
  sessionDescription String?     // For SESSION BETS - SESSION column
  targetValue       String?      // For SESSION BETS - RUNS column
  casinoGame        String?      // For CASINO BETS - CASINO column
  betDescription    String?      // For CASINO BETS - NAME column
  roundId           String?      // For CASINO BETS - ROUND ID column
  transactionId     String?      // For CASINO BETS - TRANSACTION ID column
  
  match             Match?       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ledger            Ledger[]

  @@index([userId])
  @@index([matchId])
  @@index([marketId])
  @@index([status])
  @@index([betCategory])
  @@map("bets")
}



model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        String
  amount      Float
  description String
  reference   String?
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@map("transactions")
}






model Ledger {
  id        String   @id @default(cuid())
  userId    String
  matchId   String?
  marketId  String?
  betId     String?
  type      String
  amount    Float
  createdAt DateTime @default(now())
  bet       Bet?     @relation(fields: [betId], references: [id])
  match     Match?   @relation(fields: [matchId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([matchId])
  @@index([marketId])
  @@index([betId])
  @@map("ledger")
}





enum UserRole {
  OWNER
  
  SUB_OWN
  SUP_ADM
  ADMIN
  SUB_ADM
  MAS_AGENT
  SUP_AGENT
  AGENT
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum MatchStatus {
  INPLAY
  UPCOMING
  COMPLETED
  REMOVED
  FINISHED
}

enum BettingScope {
  MATCH
  SESSION
  CASINO
}




enum BetStatus {
  PENDING
  WON
  LOST
  VOID
  CANCELED
}


enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}


enum GameStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}


