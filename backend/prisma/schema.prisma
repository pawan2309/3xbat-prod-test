generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  username            String               @unique
  password            String
  name                String?
  contactno           String?
  reference           String?
  limit               Float                @default(0)
  exposure            Float                @default(0)
  casinoStatus        Boolean?
  role                UserRole             @default(USER)
  status              UserStatus           @default(ACTIVE)
  parentId            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  bets                Bet[]
  ledger              Ledger[]
  limits              Limit[]
  loginSessions       LoginSession[]
  notifications       Notification[]
  sessions            Session[]
  transactions        Transaction[]
  userCommissionShare UserCommissionShare?
  exposures           UserExposure[]
  preferences         UserPreferences?
  parent              User?                @relation("UserHierarchy", fields: [parentId], references: [id])
  children            User[]               @relation("UserHierarchy")

  @@map("users")
}

model CasinoGame {
  id            Int      @id @default(autoincrement())
  name          String
  shortName     String
  eventId       String
  cacheUrl      String
  socketUrl     String
  videoUrl1     String
  videoUrl2     String
  videoUrl3     String?
  minStake      Int
  maxStake      Int
  fetchDataType String   @default("socket")
  videoUrlType  String   @default("1")
  betStatus     Boolean  @default(true)
  casinoStatus  Boolean  @default(true)
  errorMessage  String   @default("Game is under maintenance")
  oddsDifference String  @default("0.01")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("casino_games")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model LoginSession {
  id              String    @id @default(cuid())
  userId          String
  loginAt         DateTime  @default(now())
  logoutAt        DateTime?
  ipAddress       String?
  userAgent       String?
  deviceType      String?
  location        String?
  sessionDuration Int?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginAt])
  @@index([isActive])
  @@map("login_sessions")
}

model UserCommissionShare {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  share                   Float    @default(0)
  cshare                  Float    @default(0)
  casinocommission        Float    @default(0)
  matchcommission         Float    @default(0)
  sessioncommission       Float    @default(0)
  sessionCommission       Float?
  session_commission_type String   @default("No Comm")
  commissionType          String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  available_share_percent Float    @default(0)
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_commission_shares")
}

model Match {
  id              String         @id @default(cuid())
  externalMatchId String         @unique
  matchName       String
  externalId      String?
  name            String
  sport           String         @default("cricket")
  bevent          String
  bmarket         String
  tournament      String
  startTime       DateTime?
  status          MatchStatus    @default(UPCOMING)
  isLive          Boolean        @default(false)
  isActive        Boolean        @default(true)
  winner          String?
  settledAt       DateTime?
  isDeleted       Boolean        @default(false)
  result          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastUpdated     DateTime       @updatedAt
  bets            Bet[]
  ledger          Ledger[]
  markets         Market[]
  odds            MatchOdds[]
  exposures       UserExposure[]

  @@index([bmarket])
  @@index([bevent])
  @@index([status])
  @@index([startTime])
  @@index([isLive])
  @@index([isActive])
  @@map("matches")
}

model MatchOdds {
  id          String       @id @default(cuid())
  matchId     String
  marketId    String
  marketName  String
  gtype       String
  status      String
  lastUpdated DateTime     @updatedAt
  scope       BettingScope @default(MATCH)
  match       Match        @relation(fields: [matchId], references: [id])

  @@index([marketId])
  @@index([matchId])
  @@index([status])
  @@map("match_odds")
}

model Market {
  id               String       @id @default(cuid())
  matchId          String
  name             String
  type             MarketType
  status           MarketStatus @default(ACTIVE)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isActive         Boolean      @default(true)
  scope            BettingScope @default(MATCH)
  suspendedAt      DateTime?
  suspensionReason String?
  bets             Bet[]
  ledger           Ledger[]
  match            Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  selections       Selection[]

  @@map("markets")
}

model Selection {
  id        String          @id @default(cuid())
  marketId  String
  name      String
  odds      Float
  status    SelectionStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isActive  Boolean         @default(true)
  bets      Bet[]
  market    Market          @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@map("selections")
}

model Bet {
  id                String       @id @default(cuid())
  userId            String
  matchId           String?
  marketId          String?
  selectionId       String?
  selection         String?
  marketName        String?      // Added for better categorization
  stake             Float
  odds              Float
  betType           String?      // Keep for backward compatibility
  betCategory       BettingScope @default(MATCH) // Renamed from scope for clarity
  potentialWin      Float?
  status            BetStatus    @default(PENDING)
  profitLoss        Float?
  settledAt         DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  cancelReason      String?
  cancelledAt       DateTime?
  payout            Float?
  
  // Additional fields for table display
  teamName          String?      // For MATCH BETS - TEAM column
  betMode           String?      // For MODE column (back/lay)
  sessionDescription String?     // For SESSION BETS - SESSION column
  targetValue       String?      // For SESSION BETS - RUNS column
  casinoGame        String?      // For CASINO BETS - CASINO column
  betDescription    String?      // For CASINO BETS - NAME column
  roundId           String?      // For CASINO BETS - ROUND ID column
  transactionId     String?      // For CASINO BETS - TRANSACTION ID column
  
  market            Market?      @relation(fields: [marketId], references: [id], onDelete: Cascade)
  match             Match?       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  selectionRelation Selection?   @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ledger            Ledger[]

  @@index([userId])
  @@index([matchId])
  @@index([marketId])
  @@index([status])
  @@index([betCategory])
  @@map("bets")
}


model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  status    NotificationStatus @default(UNREAD)
  readAt    DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("notifications")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        String
  amount      Float
  description String
  reference   String?
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@map("transactions")
}

model UserPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  language      String   @default("en")
  timezone      String   @default("UTC")
  currency      String   @default("INR")
  notifications Json     @default("{\"sms\": false, \"push\": true, \"email\": true}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model QueueItem {
  id          String      @id @default(cuid())
  queueName   String
  data        String
  priority    Int         @default(1)
  status      QueueStatus @default(PENDING)
  attempts    Int         @default(0)
  lastError   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  processedAt DateTime?
  failedAt    DateTime?

  @@index([queueName])
  @@index([status])
  @@index([priority])
  @@map("queue_items")
}

model OddsHistory {
  id               String   @id @default(cuid())
  marketId         String
  selectionId      String
  previousOdds     Float
  newOdds          Float
  change           Float
  changePercentage Float
  timestamp        DateTime @default(now())

  @@index([marketId])
  @@index([selectionId])
  @@index([timestamp])
  @@map("odds_history")
}

model MarketSelection {
  id        String   @id @default(cuid())
  marketId  String
  name      String
  odds      Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([marketId])
  @@map("market_selections")
}

model UserExposure {
  id        String   @id @default(cuid())
  userId    String
  matchId   String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([matchId])
  @@map("user_exposures")
}

model Limit {
  id        String   @id @default(cuid())
  userId    String
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("limits")
}

model Ledger {
  id        String   @id @default(cuid())
  userId    String
  matchId   String?
  marketId  String?
  betId     String?
  type      String
  amount    Float
  createdAt DateTime @default(now())
  bet       Bet?     @relation(fields: [betId], references: [id])
  market    Market?  @relation(fields: [marketId], references: [id])
  match     Match?   @relation(fields: [matchId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([matchId])
  @@index([marketId])
  @@index([betId])
  @@map("ledger")
}


model CasinoTable {
  id          Int             @id @default(autoincrement())
  eventId     BigInt          @map("event_id")
  name        String          @db.VarChar(50)
  shortName   String          @map("short_name") @db.VarChar(20)
  betStatus   CasinoBetStatus @default(OPEN) @map("bet_status")
  minStake    Decimal         @default(0) @map("min_stake") @db.Decimal(10, 2)
  maxStake    Decimal         @default(0) @map("max_stake") @db.Decimal(10, 2)
  dataUrl     String?         @map("data_url")
  resultUrl   String?         @map("result_url")
  streamId    Int?            @map("stream_id")
  lastUpdated DateTime        @default(now()) @updatedAt @map("last_updated")

  @@index([betStatus], map: "idx_casino_tables_bet_status")
  @@index([streamId], map: "idx_casino_tables_stream_id")
  @@map("casino_tables")
}

model SystemConfig {
  id        String     @id @default(cuid())
  key       String     @unique
  value     String
  type      ConfigType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("system_configs")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}

enum UserRole {
  OWNER
  SUB_OWN
  SUP_ADM
  ADMIN
  SUB_ADM
  MAS_AGENT
  SUP_AGENT
  AGENT
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum MatchStatus {
  INPLAY
  UPCOMING
  COMPLETED
  REMOVED
  FINISHED
}

enum BettingScope {
  MATCH
  SESSION
  CASINO
}

enum MarketType {
  MATCH_WINNER
  OVER_UNDER
  HANDICAP
  CORRECT_SCORE
  BOTH_TEAMS_SCORE
  FIRST_GOAL_SCORER
}

enum MarketStatus {
  ACTIVE
  SUSPENDED
  SETTLED
  CANCELLED
}

enum SelectionStatus {
  ACTIVE
  SUSPENDED
  WINNER
  LOSER
  VOID
}

enum BetStatus {
  PENDING
  WON
  LOST
  VOID
  CANCELED
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum GameStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum CasinoBetStatus {
  OPEN
  CLOSED
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
