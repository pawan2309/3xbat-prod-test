"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const BetPlacementService_1 = require("../../services/betting/BetPlacementService");
const logger_1 = __importDefault(require("../../monitoring/logging/logger"));
const router = (0, express_1.Router)();
// Place a bet
router.post('/place', async (req, res) => {
    try {
        const { userId, marketName, odds, stake } = req.body;
        // Validate required fields
        if (!userId || !marketName || !odds || !stake) {
            return res.status(400).json({
                success: false,
                message: 'Missing required fields: userId, marketName, odds, stake'
            });
        }
        // Create bet object
        const bet = {
            id: '', // Will be generated by the service
            userId,
            marketName,
            odds: parseFloat(odds),
            stake: parseFloat(stake)
        };
        // Place the bet
        const result = await BetPlacementService_1.betPlacementService.placeBet(bet);
        if (result.success) {
            res.status(201).json({
                success: true,
                data: {
                    betId: result.betId,
                    betType: result.betType,
                    message: result.message
                }
            });
        }
        else {
            res.status(400).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }
    }
    catch (error) {
        logger_1.default.error('Error in bet placement API:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
// Get bet statistics for a user
router.get('/stats/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const { type } = req.query;
        if (!userId) {
            return res.status(400).json({
                success: false,
                message: 'User ID is required'
            });
        }
        const betType = type;
        const stats = await BetPlacementService_1.betPlacementService.getBetStatistics(userId, betType);
        res.json({
            success: true,
            data: stats
        });
    }
    catch (error) {
        logger_1.default.error('Error getting bet statistics:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
// Get available bet types
router.get('/types', (req, res) => {
    try {
        const availableTypes = BetPlacementService_1.betPlacementService.getAvailableBetTypes();
        res.json({
            success: true,
            data: {
                availableTypes,
                count: availableTypes.length
            }
        });
    }
    catch (error) {
        logger_1.default.error('Error getting bet types:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
// Test bet categorization
router.post('/categorize', (req, res) => {
    try {
        const { marketName } = req.body;
        if (!marketName) {
            return res.status(400).json({
                success: false,
                message: 'Market name is required'
            });
        }
        // Create a test bet object
        const testBet = {
            id: 'test',
            userId: 'test',
            marketName,
            odds: 1.5,
            stake: 100
        };
        // Import the categorization service
        const { betCategorizationService } = require('../../services/betting/BetCategorizationService');
        const betType = betCategorizationService.categorizeBet(testBet);
        res.json({
            success: true,
            data: {
                marketName,
                betType,
                message: `Market "${marketName}" categorized as ${betType} bet`
            }
        });
    }
    catch (error) {
        logger_1.default.error('Error in bet categorization:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
exports.default = router;
//# sourceMappingURL=betting.js.map